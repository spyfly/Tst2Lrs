<?php

require_once __DIR__ . "/../vendor/autoload.php";

use spyfly\Plugins\Tst2Lrs\Utils\Tst2LrsTrait;
use ILIAS\DI\Container;
use srag\CustomInputGUIs\Tst2Lrs\Loader\CustomInputGUIsLoaderDetector;
use srag\DevTools\Tst2Lrs\DevToolsCtrl;
use srag\RemovePluginDataConfirm\Tst2Lrs\PluginUninstallTrait;
use srag\DIC\Tst2Lrs\DICTrait;

/**
 * Class ilTst2LrsPlugin
 *
 * Generated by SrPluginGenerator v2.8.1
 *
 * @author Sebastian Heiden <test2lrs@spyfly.xyz>
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilTst2LrsPlugin extends ilEventHookPlugin
{

    use PluginUninstallTrait;
    use Tst2LrsTrait;
    use DICTrait;

    const PLUGIN_CLASS_NAME = self::class;
    const PLUGIN_ID = "tst2lrs";
    const PLUGIN_NAME = "Tst2Lrs";
    /**
     * @var self|null
     */
    protected static $instance = null;

    const SUPPORTED_QUESTION_TYPES = [
		'assSingleChoice',
		'assMultipleChoice',
		'assTextQuestion',
		'assNumeric'
	];

    /**
     * ilTst2LrsPlugin constructor
     */
    public function __construct()
    {
        parent::__construct();
    }

    public static function main(string $active_id, string $pass, string $ref_id, string $user_id, string $a_event)
    {
        self::dic()->logger()->root()->info('DEBUG-Tst2Lrs | Fetching Test Data for active_id: ' . $active_id);
        /* Load Test and Usr Obj */
        $ilTestObj = new ilObjTest($ref_id);
        $ilUsrObj = new ilObjUser($user_id);

        /* Init LRS Record Store and xAPI STMT List */
        $xapiStatementList = new ilLp2LrsXapiStatementList();
        $settings = new ilSetting(ilLp2LrsCron::JOB_ID);
        $lrsTypeId = $settings->get('lrs_type_id', 0);
        $lrsType = new ilCmiXapiLrsType($lrsTypeId);
        /* Init LRS End */

        /* Create Test Service GUI for loading answer results */
        $ilTestServiceGui = new ilObjTestGUI();
        /* Load Test Results */
        $results = $ilTestObj->getTestResult($active_id, $pass);
        $test_details = $results['test'];
        $pass_details = $results['pass'];

        if ($a_event === 'finishTestPass') { /* Only submit responses on finish */
            foreach ($results as $key => $values) {
                self::dic()->logger()->root()->info('DEBUG-Tst2Lrs | Values for "' . $key . '" ' . print_r($values, true));
                if ($values['qid'] && in_array($values['type'], self::SUPPORTED_QUESTION_TYPES)) {
                    /* Load questionUi and solution values (needs active and passId) */
                    $questionUi = $ilTestServiceGui->object->createQuestionGUI("", $values['qid']);
                    $solutionsRaw = $questionUi->object->getSolutionValues($active_id, $pass);

                    /* Create Question specific xAPI STMT and add to stmt list */
                    $resultStmt = new ilTst2LrsXapiTestResponseStatement($lrsType, $ilUsrObj, $values, $test_details, $ilTestObj, $questionUi, $solutionsRaw);
                    $xapiStatementList->addStatement($resultStmt);
                }
            }
        }
        /* Build test finalization statement */
        $xapiStatement = new ilTst2LrsXapiStatement($lrsType, $ilTestObj, $ilUsrObj, $a_event, $pass_details, $test_details);

        $xapiStatementList->addStatement($xapiStatement);
        self::dic()->logger()->root()->info('DEBUG-Tst2Lrs | Full xAPI Statement: ' . json_encode($xapiStatementList->getStatements()));
        /* Test finalization stmt end */

        /* Send Data to LRS */
        $lrsRequest = new ilLp2LrsXapiRequest(
            ilLoggerFactory::getRootLogger(),
            $lrsType->getLrsEndpointStatementsLink(),
            $lrsType->getLrsKey(),
            $lrsType->getLrsSecret()
        );

        $lrsRequest->send($xapiStatementList);
    }

    /**
     * @return self
     */
    public static function getInstance(): self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }


    /**
     * @inheritDoc
     */
    public function exchangeUIRendererAfterInitialization(Container $dic): Closure
    {
        return CustomInputGUIsLoaderDetector::exchangeUIRendererAfterInitialization();
    }


    /**
     * @inheritDoc
     */
    public function getPluginName(): string
    {
        return self::PLUGIN_NAME;
    }


    /**
     * @inheritDoc
     */
    public function handleEvent(/*string*/$a_component, /*string*/ $a_event, /*array*/ $a_parameter): void
    {
        // TODO: Implement handleEvent
        self::dic()->logger()->root()->info('DEBUG-Tst2Lrs | C: ' . $a_component . ' | E: ' . $a_event . ' | P: ' . json_encode($a_parameter));
        if ($a_component === 'Modules/Test') {
            $this::main($a_parameter['active_id'], $a_parameter['pass'], $a_parameter['ref_id'], $a_parameter['user_id'], $a_event);
        }
    }


    /**
     * @inheritDoc
     */
    public function updateLanguages(/*?array*/$a_lang_keys = null): void
    {
        parent::updateLanguages($a_lang_keys);

        $this->installRemovePluginDataConfirmLanguages();
    }


    /**
     * @inheritDoc
     */
    protected function deleteData(): void
    {
        self::tst2Lrs()->dropTables();
    }


    /**
     * @inheritDoc
     */
    protected function shouldUseOneUpdateStepOnly(): bool
    {
        return false;
    }
}
